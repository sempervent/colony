name: Colony Simulator CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      target:
        description: 'CI target (e.g., verify, rc)'
        required: true
        default: 'verify'
      version:
        description: 'Version for RC (e.g., v0.9.0-rc1)'
        required: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run Clippy
        run: cargo clippy --workspace --all-features -- -D warnings

  build:
    name: Build (${{ matrix.os }} - ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: stable
          - os: macos-latest
            rust: stable
          - os: windows-latest
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@${{ matrix.rust }}
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build all crates
        run: cargo build --workspace --all-features
      - name: Build release binaries
        run: cargo build --workspace --all-features --release

  test:
    name: Test (${{ matrix.os }} - ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@${{ matrix.rust }}
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run unit tests
        run: cargo test --workspace --all-features
      - name: Run property tests
        run: cargo test --workspace --all-features --test property_tests
      - name: Run M7 unit tests
        run: cargo test --workspace --all-features --test m7_unit_tests

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run cargo audit
        run: cargo audit
      - name: Install cargo-deny
        run: cargo install cargo-deny
      - name: Run cargo deny
        run: cargo deny check

  e2e:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [build] # Ensure build passes before running E2E
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build headless server
        run: cargo build --release --bin colony-headless
      - name: Start headless server
        run: |
          cargo run --release --bin colony-headless &
          sleep 10
      - name: Run E2E tests
        run: cargo test --package colony-headless --test e2e_integration
      - name: Run E2E tests via xtask
        run: cargo run -p xtask -- e2e

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run benchmarks
        run: cargo bench --workspace --all-features
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/

  determinism:
    name: Determinism & Replay Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run determinism tests
        run: cargo test --workspace --all-features --test determinism_tests

  security-tests:
    name: Security & Sandboxing Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run security tests
        run: cargo test --workspace --all-features --test security_tests

  persistence:
    name: Persistence & Migration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run persistence tests
        run: cargo test --workspace --all-features --test persistence_tests

  parity:
    name: Desktop/Headless Parity Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run parity tests
        run: cargo test --workspace --all-features --test parity_tests

  verify:
    name: Full Verification Suite
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, e2e, benchmarks, determinism, security-tests, persistence, parity]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'verify'
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run full verification suite
        run: cargo run -p xtask -- verify
      - name: Upload verification results
        uses: actions/upload-artifact@v4
        with:
          name: verification-results
          path: target/verify/

  release-rc:
    name: Release Candidate Packaging
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, e2e, benchmarks, determinism, security-tests, persistence, parity]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'rc'
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Release Binaries
        run: cargo build --workspace --all-features --release
      - name: Run RC packaging via xtask
        run: cargo run -p xtask -- rc --version ${{ github.event.inputs.version || 'v0.9.0-rc1' }}
        env:
          RC_VERSION: ${{ github.event.inputs.version || 'v0.9.0-rc1' }}
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: colony-rc-${{ github.event.inputs.version || 'v0.9.0-rc1' }}
          path: target/rc/
      - name: Create Release
        if: github.event.inputs.version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Colony Simulator ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
          body: |
            ## Colony Simulator ${{ github.event.inputs.version }}
            
            This is a release candidate for the Colony Simulator.
            
            ### What's Included
            - Desktop application (`colony-desktop`)
            - Headless server (`colony-headless`)
            - Mod development CLI (`colony-mod`)
            - Documentation and example mods
            - Verification reports and checksums
            
            ### Verification Status
            ✅ All verification suites passed
            ✅ Security audit clean
            ✅ Performance baselines met
            ✅ Deterministic replay verified
            ✅ M1-M7 features tested
            
            ### Installation
            1. Download the appropriate archive for your platform
            2. Verify checksums: `sha256sum -c SHA256SUMS`
            3. Extract and run: `./colony-desktop` or `./colony-headless`
            
            ### Known Issues
            None
            
            ### Feedback
            Please report any issues or feedback through GitHub Issues.
          assets: target/rc/*

  # Matrix build for different feature combinations
  feature-matrix:
    name: Feature Matrix (${{ matrix.features }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: 
          - "desktop"
          - "can_real"
          - "modbus_real"
          - "desktop,can_real"
          - "desktop,modbus_real"
          - "can_real,modbus_real"
          - "desktop,can_real,modbus_real"
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.features }}-
      - name: Build with features
        run: cargo build --workspace --features "${{ matrix.features }}"
      - name: Test with features
        run: cargo test --workspace --features "${{ matrix.features }}"

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build documentation
        run: cargo doc --workspace --all-features --no-deps
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run coverage
        run: cargo tarpaulin --workspace --all-features --out Html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tarpaulin-report.html